{"name":"Interesting-apps","tagline":"Monty Hall - Not mine, just liked it.","body":"//Monty Hall - Java\r\n\r\n\r\npublic class MontyHall {\r\n\r\n    // How many doors.\r\n    static final int Doors = 4;\r\n\r\n    // Prizes.\r\n    enum Prize {\r\n\r\n        Goat,\r\n        Car;\r\n    }\r\n\r\n    public static void main(String[] args) throws InterruptedException {\r\n        // The number of times we would have won if we switched.\r\n        int winWhenSwitched = 0;\r\n        // The number of times we would have won if we didn't switch.\r\n        int winWhenNotSwitched = 0;\r\n        // The number of times we would have lost both ways.\r\n        int lost = 0;\r\n\r\n        // n doors.\r\n        Prize doors[] = new Prize[Doors];\r\n        // N Tests\r\n        for (int i = 0; i < 100000; i++) {\r\n            // Put a car behind just one door.\r\n            pickRandomDoorForCar(doors);\r\n            // Make my first choice.\r\n            int firstChoice = randomDoor();\r\n            // Open one remaining goat door. \r\n            int goatDoorOpened = openOneGoatDoor(doors, firstChoice);\r\n            // What would have been my second choice - if I switched?\r\n            int secondChoice = makeSecondChoice(doors, firstChoice, goatDoorOpened);\r\n            // Count wins/losses.\r\n            if (doors[firstChoice] == Prize.Car) {\r\n                // We would have won without switching!\r\n                winWhenNotSwitched += 1;\r\n            } else {\r\n                // We win if we switched to the car!\r\n                if (doors[secondChoice] == Prize.Car) {\r\n                    // We picked right!\r\n                    winWhenSwitched += 1;\r\n                } else {\r\n                    // Bad choice.\r\n                    lost += 1;\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"Wins when switched = \" + winWhenSwitched);\r\n        System.out.println(\"Wins when not switched = \" + winWhenNotSwitched);\r\n        System.out.println(\"Lost = \" + lost);\r\n        System.out.println(\"Proportion = \" + ((double) winWhenSwitched / (double) winWhenNotSwitched));\r\n    }\r\n\r\n    // Open one door exposing a Goat.\r\n    private static int openOneGoatDoor(Prize doors[], int firstChoice) {\r\n        for (int j = 0; j < Doors; j++) {\r\n            // Not the one already picked and must contain goat.\r\n            if (j != firstChoice && doors[j] == Prize.Goat) {\r\n                // Can only be one of them.\r\n                return j;\r\n            }\r\n        }\r\n        // Should never get here - TODO - Throw an exception here.\r\n        return -1;\r\n    }\r\n\r\n    // Make a second choice - avoid first choice and opened door.\r\n    private static int makeSecondChoice(Prize[] doors, int firstChoice, int goatDoorOpened) {\r\n        int secondChoice = randomDoor();\r\n        while (secondChoice == firstChoice || secondChoice == goatDoorOpened) {\r\n            // Try again.\r\n            secondChoice = randomDoor();\r\n        }\r\n        return secondChoice;\r\n    }\r\n\r\n    // Pick a random door and put a Car there.\r\n    private static void pickRandomDoorForCar(Prize[] doors) {\r\n        // Start all goats.\r\n        Arrays.fill(doors, Prize.Goat);\r\n        // Pick a random for the car.\r\n        doors[randomDoor()] = Prize.Car;\r\n    }\r\n    // Start my random number generator.\r\n    static final Random random = new Random(System.currentTimeMillis());\r\n\r\n    // Pick a random door.\r\n    private static int randomDoor() {\r\n        return random.nextInt(Doors);\r\n    }\r\n}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}